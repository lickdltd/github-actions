name: Terraform
on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        required: true
      aws-account-id:
        type: string
        required: true
      working-directory:
        type: string
        required: true
      workspace:
        type: string
        required: false
        default: default
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/GitHub
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Format
        run: terraform fmt -check
      - name: Initialise
        env:
          GIT_SSH_COMMAND: 'ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts'
        run: terraform init -upgrade
      - name: Select workspace
        if: inputs.workspace!= 'default'
        run: terraform workspace select ${{ inputs.workspace }} -no-color
      - name: Validate
        run: terraform validate -no-color
      - name: Refresh
        if: github.ref == 'refs/heads/main'
        run: terraform apply -no-color -compact-warnings -auto-approve -refresh-only
      - name: Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -compact-warnings
        continue-on-error: true
      - name: Update pull request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### ${{ inputs.working-directory }} (${{ inputs.workspace }})
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -compact-warnings -auto-approve

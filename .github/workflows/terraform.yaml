name: Terraform
on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        required: true
      aws-account-id:
        type: string
        required: true
      working-directory:
        type: string
        required: true
      terraform-version:
        type: string
        required: false
        default: '1.0.0'
      workspace:
        type: string
        required: false
        default: default
      refresh:
        type: boolean
        required: false
        default: false
      apply:
        type: boolean
        required: false
        default: false
    secrets:
      ssh-private-key:
        required: false
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        id: setup
        uses: lickdltd/setup-action@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-account-id: ${{ inputs.aws-account-id }}
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Format
        id: fmt
        run: terraform fmt -check
      - name: Initialise
        id: init
        env:
          GIT_SSH_COMMAND: 'ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=~/.ssh/known_hosts'
        run: terraform init -upgrade
      - name: Create workspace
        if: inputs.workspace != 'default'
        run: terraform workspace new ${{ inputs.workspace }} -no-color
        continue-on-error: true
      - name: Select workspace
        if: inputs.workspace != 'default'
        run: terraform workspace select ${{ inputs.workspace }} -no-color
      - name: Validate
        id: validate
        run: terraform validate -no-color
      - name: Refresh
        if: inputs.refresh == true
        run: terraform apply -no-color -compact-warnings -auto-approve -refresh-only
      - name: Plan
        if: inputs.apply == false
        env:
          TF_VAR_docker_tag: ${{ steps.setup.outputs.git-hash-short }}
        run: terraform plan -no-color -compact-warnings -input=false
      - name: Apply
        if: inputs.apply == true
        env:
          TF_VAR_docker_tag: ${{ steps.setup.outputs.git-hash-short }}
        run: terraform apply -compact-warnings -auto-approve -input=false

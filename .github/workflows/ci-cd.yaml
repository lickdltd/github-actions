name: CI/CD
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      docker-image-url:
        type: string
        required: true
      docker-tag:
        type: string
        required: true
      test-command:
        type: string
        required: true
    secrets:
      gh-pat:
        required: true
      ssh-private-key:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_COMPOSE_FILE: ./docker-compose.build.yaml
      DOCKER_IMAGE_URL: ${{ inputs.docker-image-url }}
      DOCKER_TAG: ${{ inputs.docker-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.gh-pat }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build
        run: docker-compose -f $DOCKER_COMPOSE_FILE build --force-rm --no-cache --pull
      - name: Test
        run: ${{ inputs.test-command }}
      - name: Push
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        run: docker-compose -f $DOCKER_COMPOSE_FILE push
  infrastructure-shared:
    name: Infrastructure (shared)
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./infrastructure/terraform/shared
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup SSH key
        run: echo "${{ secrets.ssh-private-key }}" > ./id_rsa
      - name: Setup SSH known hosts
        run: ssh-keyscan github.com > ./known_hosts
      - name: Setup SSH permissions
        run: chmod 600 ./id_rsa ./known_hosts
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Format
        run: terraform fmt -no-color -diff -check
      - name: Initialise
        env:
          GIT_SSH_COMMAND: 'ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts'
        run: terraform init -no-color -upgrade
      - name: Validate
        run: terraform validate -no-color
      - name: Plan
        run: terraform plan -no-color -compact-warnings
      - name: Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: terraform apply -no-color -compact-warnings -auto-approve
  infrastructure-environment:
    name: Infrastructure (environment)
    runs-on: ubuntu-latest
    needs: infrastructure-shared
    defaults:
      run:
        working-directory: ./infrastructure/terraform/environment
    env:
      TF_VAR_docker_tag: ${{ inputs.docker-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup SSH key
        run: echo "${{ secrets.ssh-private-key }}" > ./id_rsa
      - name: Setup SSH known hosts
        run: ssh-keyscan github.com > ./known_hosts
      - name: Setup SSH permissions
        run: chmod 600 ./id_rsa ./known_hosts
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Format
        run: terraform fmt -no-color -diff -check
      - name: Initialise
        env:
          GIT_SSH_COMMAND: 'ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts'
        run: terraform init -no-color -upgrade
      - name: Create workspace
        run: terraform workspace new ${{ inputs.environment }} -no-color
        continue-on-error: true
      - name: Select workspace
        run: terraform workspace select ${{ inputs.environment }} -no-color
      - name: Validate
        run: terraform validate -no-color
      - name: Plan
        run: terraform plan -no-color -compact-warnings
      - name: Apply
        if: ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && inputs.environment == 'prod') || (github.ref == 'refs/heads/develop' && inputs.environment == 'test')
        run: terraform apply -no-color -compact-warnings -auto-approve
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: infrastructure-environment
    env:
      DOCKER_COMPOSE_FILE: ./docker-compose.ansible.yaml
      ANSIBLE_ENV: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.gh-pat }}
      - name: Setup SSH key
        run: echo "${{ secrets.ssh-private-key }}" > ./id_rsa
      - name: Setup SSH known hosts
        run: ssh-keyscan github.com > ./known_hosts
      - name: Setup SSH permissions
        run: chmod 600 ./id_rsa ./known_hosts
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: eu-west-1
      - name: Install ansible requirements
        run: docker-compose -f $DOCKER_COMPOSE_FILE run ansible ansible-galaxy install -r requirements.yaml
      - name: Deploy using anisble
        run: docker-compose -f $DOCKER_COMPOSE_FILE run ansible ansible-playbook deploy.yaml

name: Terraform
on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        required: true
      aws-account-id:
        type: string
        required: true
      working-directory:
        type: string
        required: true
      ssh:
        type: boolean
        required: false
        default: false
      terraform-version:
        type: string
        required: false
        default: '1.0.0'
      workspace:
        type: string
        required: false
        default: default
      variables:
        type: string
        required: false
    secrets:
      ssh-private-key:
        required: false
jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/GitHub
      - name: Setup SSH key
        if: inputs.ssh == true
        run: echo "${{ secrets.ssh-private-key }}" > ./id_rsa
      - name: Setup SSH permissions
        if: inputs.ssh == true
        run: chmod 600 ./id_rsa
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Format
        id: fmt
        run: terraform fmt -check
      - name: Initialise
        id: init
        env:
          GIT_SSH_COMMAND: 'ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts'
        run: terraform init -upgrade
      - name: Select workspace
        if: inputs.workspace!= 'default'
        run: terraform workspace select ${{ inputs.workspace }} -no-color
      - name: Validate
        id: validate
        run: terraform validate -no-color
      - name: Refresh
        if: github.ref == 'refs/heads/main'
        run: terraform apply -no-color -compact-warnings -auto-approve -refresh-only
      - name: Variables
        if: inputs.variables != ''
        run: echo "${{ toJSON(inputs.variables) }}" > ./terraform.tfvars.json
      - name: Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -compact-warnings -input=false
        continue-on-error: true
      - name: Update pull request
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### ${{ inputs.working-directory }} (${{ inputs.workspace }})
            🖌  Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            ⚙  Terraform Initialization ️\`${{ steps.init.outcome }}\`
            🤖  Terraform Validation \`${{ steps.validate.outcome }}\`
            📖  Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: \`${{ github.actor }}\`, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
        run: terraform apply -compact-warnings -auto-approve -input=false
